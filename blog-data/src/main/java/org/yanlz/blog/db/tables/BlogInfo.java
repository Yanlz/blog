/**
 * This class is generated by jOOQ
 */
package org.yanlz.blog.db.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.yanlz.blog.db.Blog;
import org.yanlz.blog.db.Keys;
import org.yanlz.blog.db.tables.records.BlogInfoRecord;


/**
 * 文章信息表
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BlogInfo extends TableImpl<BlogInfoRecord> {

	private static final long serialVersionUID = 1660683071;

	/**
	 * The reference instance of <code>blog.tb_blog_info</code>
	 */
	public static final BlogInfo TB_BLOG_INFO = new BlogInfo();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<BlogInfoRecord> getRecordType() {
		return BlogInfoRecord.class;
	}

	/**
	 * The column <code>blog.tb_blog_info.blog_id</code>. 主键
	 */
	public final TableField<BlogInfoRecord, ULong> BLOG_ID = createField("blog_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "主键");

	/**
	 * The column <code>blog.tb_blog_info.blog_author</code>. 用户ID
	 */
	public final TableField<BlogInfoRecord, Long> BLOG_AUTHOR = createField("blog_author", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "用户ID");

	/**
	 * The column <code>blog.tb_blog_info.blog_type</code>. 博客类型，0：未分类
	 */
	public final TableField<BlogInfoRecord, Byte> BLOG_TYPE = createField("blog_type", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "博客类型，0：未分类");

	/**
	 * The column <code>blog.tb_blog_info.blog_title</code>. 文章标题
	 */
	public final TableField<BlogInfoRecord, String> BLOG_TITLE = createField("blog_title", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false).defaulted(true), this, "文章标题");

	/**
	 * The column <code>blog.tb_blog_info.blog_abstract</code>. 文章摘要
	 */
	public final TableField<BlogInfoRecord, String> BLOG_ABSTRACT = createField("blog_abstract", org.jooq.impl.SQLDataType.VARCHAR.length(500).nullable(false).defaulted(true), this, "文章摘要");

	/**
	 * The column <code>blog.tb_blog_info.blog_content</code>. 文章内容
	 */
	public final TableField<BlogInfoRecord, String> BLOG_CONTENT = createField("blog_content", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "文章内容");

	/**
	 * The column <code>blog.tb_blog_info.created_time</code>. 创建时间
	 */
	public final TableField<BlogInfoRecord, Timestamp> CREATED_TIME = createField("created_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "创建时间");

	/**
	 * The column <code>blog.tb_blog_info.updated_time</code>. 更新时间
	 */
	public final TableField<BlogInfoRecord, Timestamp> UPDATED_TIME = createField("updated_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "更新时间");

	/**
	 * The column <code>blog.tb_blog_info.comment_count</code>. 评论条数
	 */
	public final TableField<BlogInfoRecord, Long> COMMENT_COUNT = createField("comment_count", org.jooq.impl.SQLDataType.BIGINT.defaulted(true), this, "评论条数");

	/**
	 * Create a <code>blog.tb_blog_info</code> table reference
	 */
	public BlogInfo() {
		this("tb_blog_info", null);
	}

	/**
	 * Create an aliased <code>blog.tb_blog_info</code> table reference
	 */
	public BlogInfo(String alias) {
		this(alias, TB_BLOG_INFO);
	}

	private BlogInfo(String alias, Table<BlogInfoRecord> aliased) {
		this(alias, aliased, null);
	}

	private BlogInfo(String alias, Table<BlogInfoRecord> aliased, Field<?>[] parameters) {
		super(alias, Blog.BLOG, aliased, parameters, "文章信息表");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<BlogInfoRecord, ULong> getIdentity() {
		return Keys.IDENTITY_TB_BLOG_INFO;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<BlogInfoRecord> getPrimaryKey() {
		return Keys.KEY_TB_BLOG_INFO_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<BlogInfoRecord>> getKeys() {
		return Arrays.<UniqueKey<BlogInfoRecord>>asList(Keys.KEY_TB_BLOG_INFO_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BlogInfo as(String alias) {
		return new BlogInfo(alias, this);
	}

	/**
	 * Rename this table
	 */
	public BlogInfo rename(String name) {
		return new BlogInfo(name, null);
	}
}
