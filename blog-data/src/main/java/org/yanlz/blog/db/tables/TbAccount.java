/**
 * This class is generated by jOOQ
 */
package org.yanlz.blog.db.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.yanlz.blog.db.Blog;
import org.yanlz.blog.db.Keys;
import org.yanlz.blog.db.tables.records.TbAccountRecord;


/**
 * 用户账户表
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbAccount extends TableImpl<TbAccountRecord> {

	private static final long serialVersionUID = -111853881;

	/**
	 * The reference instance of <code>blog.tb_account</code>
	 */
	public static final TbAccount TB_ACCOUNT = new TbAccount();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TbAccountRecord> getRecordType() {
		return TbAccountRecord.class;
	}

	/**
	 * The column <code>blog.tb_account.id</code>. 主键
	 */
	public final TableField<TbAccountRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "主键");

	/**
	 * The column <code>blog.tb_account.user_id</code>. 用户id
	 */
	public final TableField<TbAccountRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "用户id");

	/**
	 * The column <code>blog.tb_account.account_name</code>. 登录帐号
	 */
	public final TableField<TbAccountRecord, String> ACCOUNT_NAME = createField("account_name", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false).defaulted(true), this, "登录帐号");

	/**
	 * The column <code>blog.tb_account.telephone</code>. 电话
	 */
	public final TableField<TbAccountRecord, String> TELEPHONE = createField("telephone", org.jooq.impl.SQLDataType.VARCHAR.length(15).nullable(false).defaulted(true), this, "电话");

	/**
	 * The column <code>blog.tb_account.email</code>. 点子邮箱
	 */
	public final TableField<TbAccountRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false).defaulted(true), this, "点子邮箱");

	/**
	 * The column <code>blog.tb_account.password</code>. 密码
	 */
	public final TableField<TbAccountRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false).defaulted(true), this, "密码");

	/**
	 * The column <code>blog.tb_account.type</code>. 账户类型，0:普通用户，1:管理员
	 */
	public final TableField<TbAccountRecord, Byte> TYPE = createField("type", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "账户类型，0:普通用户，1:管理员");

	/**
	 * The column <code>blog.tb_account.created_time</code>.
	 */
	public final TableField<TbAccountRecord, Timestamp> CREATED_TIME = createField("created_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>blog.tb_account.updated_time</code>.
	 */
	public final TableField<TbAccountRecord, Timestamp> UPDATED_TIME = createField("updated_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>blog.tb_account.status</code>. 账户状态，枚举类型，0:无效，1:有效，默认为1
	 */
	public final TableField<TbAccountRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "账户状态，枚举类型，0:无效，1:有效，默认为1");

	/**
	 * Create a <code>blog.tb_account</code> table reference
	 */
	public TbAccount() {
		this("tb_account", null);
	}

	/**
	 * Create an aliased <code>blog.tb_account</code> table reference
	 */
	public TbAccount(String alias) {
		this(alias, TB_ACCOUNT);
	}

	private TbAccount(String alias, Table<TbAccountRecord> aliased) {
		this(alias, aliased, null);
	}

	private TbAccount(String alias, Table<TbAccountRecord> aliased, Field<?>[] parameters) {
		super(alias, Blog.BLOG, aliased, parameters, "用户账户表");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<TbAccountRecord, ULong> getIdentity() {
		return Keys.IDENTITY_TB_ACCOUNT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TbAccountRecord> getPrimaryKey() {
		return Keys.KEY_TB_ACCOUNT_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TbAccountRecord>> getKeys() {
		return Arrays.<UniqueKey<TbAccountRecord>>asList(Keys.KEY_TB_ACCOUNT_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TbAccount as(String alias) {
		return new TbAccount(alias, this);
	}

	/**
	 * Rename this table
	 */
	public TbAccount rename(String name) {
		return new TbAccount(name, null);
	}
}
