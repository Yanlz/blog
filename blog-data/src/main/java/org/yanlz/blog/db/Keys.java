/**
 * This class is generated by jOOQ
 */
package org.yanlz.blog.db;


import javax.annotation.Generated;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;
import org.jooq.types.ULong;
import org.yanlz.blog.db.tables.Account;
import org.yanlz.blog.db.tables.BlogInfo;
import org.yanlz.blog.db.tables.CommentInfo;
import org.yanlz.blog.db.tables.UserInfo;
import org.yanlz.blog.db.tables.records.AccountRecord;
import org.yanlz.blog.db.tables.records.BlogInfoRecord;
import org.yanlz.blog.db.tables.records.CommentInfoRecord;
import org.yanlz.blog.db.tables.records.UserInfoRecord;


/**
 * A class modelling foreign key relationships between tables of the <code>blog</code> 
 * schema
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	public static final Identity<AccountRecord, ULong> IDENTITY_TB_ACCOUNT = Identities0.IDENTITY_TB_ACCOUNT;
	public static final Identity<BlogInfoRecord, ULong> IDENTITY_TB_BLOG_INFO = Identities0.IDENTITY_TB_BLOG_INFO;
	public static final Identity<CommentInfoRecord, ULong> IDENTITY_TB_COMMENT_INFO = Identities0.IDENTITY_TB_COMMENT_INFO;
	public static final Identity<UserInfoRecord, ULong> IDENTITY_TB_USER_INFO = Identities0.IDENTITY_TB_USER_INFO;

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<AccountRecord> KEY_TB_ACCOUNT_PRIMARY = UniqueKeys0.KEY_TB_ACCOUNT_PRIMARY;
	public static final UniqueKey<BlogInfoRecord> KEY_TB_BLOG_INFO_PRIMARY = UniqueKeys0.KEY_TB_BLOG_INFO_PRIMARY;
	public static final UniqueKey<CommentInfoRecord> KEY_TB_COMMENT_INFO_PRIMARY = UniqueKeys0.KEY_TB_COMMENT_INFO_PRIMARY;
	public static final UniqueKey<UserInfoRecord> KEY_TB_USER_INFO_PRIMARY = UniqueKeys0.KEY_TB_USER_INFO_PRIMARY;

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------


	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private static class Identities0 extends AbstractKeys {
		public static Identity<AccountRecord, ULong> IDENTITY_TB_ACCOUNT = createIdentity(Account.TB_ACCOUNT, Account.TB_ACCOUNT.ID);
		public static Identity<BlogInfoRecord, ULong> IDENTITY_TB_BLOG_INFO = createIdentity(BlogInfo.TB_BLOG_INFO, BlogInfo.TB_BLOG_INFO.BLOG_ID);
		public static Identity<CommentInfoRecord, ULong> IDENTITY_TB_COMMENT_INFO = createIdentity(CommentInfo.TB_COMMENT_INFO, CommentInfo.TB_COMMENT_INFO.COMMENT_ID);
		public static Identity<UserInfoRecord, ULong> IDENTITY_TB_USER_INFO = createIdentity(UserInfo.TB_USER_INFO, UserInfo.TB_USER_INFO.USER_ID);
	}

	private static class UniqueKeys0 extends AbstractKeys {
		public static final UniqueKey<AccountRecord> KEY_TB_ACCOUNT_PRIMARY = createUniqueKey(Account.TB_ACCOUNT, Account.TB_ACCOUNT.ID);
		public static final UniqueKey<BlogInfoRecord> KEY_TB_BLOG_INFO_PRIMARY = createUniqueKey(BlogInfo.TB_BLOG_INFO, BlogInfo.TB_BLOG_INFO.BLOG_ID);
		public static final UniqueKey<CommentInfoRecord> KEY_TB_COMMENT_INFO_PRIMARY = createUniqueKey(CommentInfo.TB_COMMENT_INFO, CommentInfo.TB_COMMENT_INFO.COMMENT_ID);
		public static final UniqueKey<UserInfoRecord> KEY_TB_USER_INFO_PRIMARY = createUniqueKey(UserInfo.TB_USER_INFO, UserInfo.TB_USER_INFO.USER_ID);
	}
}
